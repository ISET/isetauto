function trafficflow=piParkingPlace(road, trafficflow, varargin)
% Add parked cars in trafficflow
%
% Inputs
%  Road: road information
%
% Optional key/value parameters
%   density: control how many parking cars will be planed, ranging from 0~1
%
% Output
%   trafficflow: Generated by SUMO, updated with planed parked cars info
%   in this function.
%
% Shuangting Liu, VISTALAB, 2018
%% read the information of parking street
parking_list=road.roadinfo.parking_list;
%% parse the input
p = inputParser;
p.addParameter('density',1);
p.addParameter('parallelParking',true);
p.parse(varargin{:});
inputs = p.Results;
density = inputs.density;
parallelParking = inputs.parallelParking;
%%
x = size(parking_list,2);
remain_length=2+randi(3);
offset = parking_list(1).width/2;
% interval distance between positions of cars
interval=5;
% Parallel parking along the road, else vertical parking
if parallelParking
    for jj = 1 : x
        start_point = parking_list(jj).coordinate - [cos(parking_list(jj).direction*pi/180)*offset, -sin(parking_list(jj).direction*pi/180)*offset];
        total_number = floor((parking_list(jj).length-2*remain_length)/interval);
        object_number = floor(density*(parking_list(jj).length-2*remain_length)/interval);
        
        rand_list = randperm(total_number);
        rand_length =rand_list(1:object_number)*4+remain_length*ones(1,object_number);
        coordinate_rand(1,:) = (rand_length .* sin(parking_list(jj).direction * pi/180));
        coordinate_rand(2,:) = (cos(parking_list(jj).direction * pi/180) .* rand_length);
        for ii = 1 : length(trafficflow)
            if isfield(trafficflow(ii).objects,'car')
                car_num= length(trafficflow(ii).objects.car);
                for kk =1:object_number
                    trafficflow(ii).objects.car(car_num+kk).class = 'car';
                    trafficflow(ii).objects.car(car_num+kk).type = 'passenger';
                    trafficflow(ii).objects.car(car_num+kk).name = sprintf('car_%d_%d',jj,kk);
                    trafficflow(ii).objects.car(car_num+kk).pos = [start_point(1) + coordinate_rand(1,kk), -0.15, start_point(2) + coordinate_rand(2,kk)];
                    trafficflow(ii).objects.car(car_num+kk).speed = 0;
                    trafficflow(ii).objects.car(car_num+kk).orientation = parking_list(jj).direction+180;
                end
            end
        end
    end
else
    for jj = 1 : x
        start_point = parking_list(jj).coordinate - [cos(parking_list(jj).direction*pi/90)*offset, -sin(parking_list(jj).direction*pi/90)*offset];
        total_number = floor((parking_list(jj).length-2*remain_length)/interval);
        object_number = floor(density*(parking_list(jj).length-2*remain_length)/interval);
        
        rand_list = randperm(total_number);
        rand_length = rand_list(1:object_number)*4+remain_length*ones(1,object_number);
        coordinate_rand(1,:) = (rand_length .* sin(parking_list(jj).direction * pi/90));
        coordinate_rand(2,:) = (cos(parking_list(jj).direction * pi/180) .* rand_length);
        for ii = 1 : length(trafficflow)
            if isfield(trafficflow(ii).objects,'car')
                car_num= length(trafficflow(ii).objects.car);
                for kk =1:object_number
                    trafficflow(ii).objects.car(car_num+kk).class='car';
                    trafficflow(ii).objects.car(car_num+kk).type='passenger';
                    trafficflow(ii).objects.car(car_num+kk).name=sprintf('car_%d_%d',jj,kk);
                    
                    if trafficflow(ii).objects.car(car_num+kk).orientation == 0
                        Xoffset = 1.5;
                        Rot_park = 90;
                    else
                        Xoffset = -1.5;
                        Rot_park = -90;
                    end
                    trafficflow(ii).objects.car(car_num+kk).pos=[start_point(1) + coordinate_rand(1,kk) + Xoffset, -0.15, start_point(2) + coordinate_rand(2,kk)];
                    trafficflow(ii).objects.car(car_num+kk).speed=0;
                    trafficflow(ii).objects.car(car_num+kk).orientation= Rot_park;
                end
            end
        end
    end
end






