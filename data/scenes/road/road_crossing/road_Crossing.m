function [allData, scenario, sensor] = dsd()
%dsd - Returns sensor detections
%    allData = dsd returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = dsd optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.14 (R2023a) and Automated Driving Toolbox 3.7 (R2023a).
% Generated on: 18-Jun-2023 08:21:20

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
sensor = createSensor(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;

    % Generate detections for the sensor
    laneDetections = [];
    ptClouds = [];
    insMeas = [];
    [objectDetections, isValidTime] = sensor(poses, time);
    numObjects = length(objectDetections);
    objectDetections = objectDetections(1:numObjects);

    % Aggregate all detections into a structure for later use
    if isValidTime
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release the sensor object so it can be used again.
release(sensor);

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function sensor = createSensor(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensor = visionDetectionGenerator('SensorIndex', 1, ...
    'UpdateInterval', 0.3, ...
    'SensorLocation', [1.9 0], ...
    'DetectorOutput', 'Objects only', ...
    'ActorProfiles', profiles);

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = ia_drivingScenario('SampleTime', 0.3);

% Add all road segments
roadCenters = [999.44995117188 21.129999160767 0;
    749.45665592757 22.960936869135 0;
    500.02293222965 24.787776305013 0;
    499.46336068326 24.791874577504 0;
    249.47006543895 26.622812285873 0;
    0.59591328743363 28.44555344926 0];
headings = [179.58037623573;179.58037623573;179.58037623573;179.58037623573;179.58037623573;179.58037623573];
marking = [laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')];
lanetypes = [laneType('Border')
    laneType('Border')
    laneType('Shoulder')
    laneType('Driving')
    laneType('Driving')
    laneType('Shoulder')
    laneType('Border')
    laneType('Border')];
laneSpecification = lanespec([4 4], 'Width', [2 0.635 0.5 3.5 3.5 0.5 0.635 2], 'Marking', marking, 'Type', lanetypes);
road(scenario, roadCenters, 'Heading', headings, 'Lanes', laneSpecification, 'Name', 'road_Crossing');

roadCenters = [-17.535915667416 28.578350008155 0;
    -267.52921091172 30.409287716523 0;
    -513.28294196457 32.209175080372 0;
    -517.52250615603 32.240225424892 0;
    -767.51580140034 34.071163133261 0;
    -1009.0299682617 35.840000152589 0];
headings = [179.58037623573;179.58037623573;179.58037623573;179.58037623573;179.58037623573;179.58037623573];
marking = [laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')];
lanetypes = [laneType('Border')
    laneType('Border')
    laneType('Shoulder')
    laneType('Driving')
    laneType('Driving')
    laneType('Shoulder')
    laneType('Border')
    laneType('Border')];
laneSpecification = lanespec([4 4], 'Width', [2 0.635 0.5 3.5 3.5 0.5 0.635 2], 'Marking', marking, 'Type', lanetypes);
road(scenario, roadCenters, 'Heading', headings, 'Lanes', laneSpecification, 'Name', 'road_Crossing');

roadCenters = [-8.4700002670288 -994.14996337891 0;
    -8.4700002670288 -744.14996337891 0;
    -8.4700002670288 -494.14996337891 0;
    -8.4700002670288 -487.35208432702 0;
    -8.4700002670288 -244.14996337891 0;
    -8.4700002670287 5.8500366210938 0;
    -8.4700002670287 19.445794724865 0];
headings = [90;90;90;90;90;90;90];
marking = [laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')];
lanetypes = [laneType('Border')
    laneType('Border')
    laneType('Shoulder')
    laneType('Driving')
    laneType('Driving')
    laneType('Shoulder')
    laneType('Border')
    laneType('Border')];
laneSpecification = lanespec([4 4], 'Width', [2 0.635 0.5 3.5 3.5 0.5 0.635 2], 'Marking', marking, 'Type', lanetypes);
road(scenario, roadCenters, 'Heading', headings, 'Lanes', laneSpecification, 'Name', 'road_Crossing');

roadCenters = [-8.4700002670287 37.578110230322 0;
    -8.4700002670287 287.57811023032 0;
    -8.4700002670287 529.63405633586 0;
    -8.4700002670287 537.57811023032 0;
    -8.4700002670287 787.57811023032 0;
    -8.4700002670287 1021.6900024414 0];
headings = [90;90;90;90;90;90];
marking = [laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')];
lanetypes = [laneType('Border')
    laneType('Border')
    laneType('Shoulder')
    laneType('Driving')
    laneType('Driving')
    laneType('Shoulder')
    laneType('Border')
    laneType('Border')];
laneSpecification = lanespec([4 4], 'Width', [2 0.635 0.5 3.5 3.5 0.5 0.635 2], 'Marking', marking, 'Type', lanetypes);
road(scenario, roadCenters, 'Heading', headings, 'Lanes', laneSpecification, 'Name', 'road_Crossing');

roadCenters = [-1029.0785613485 50 0;
    -1029.0785613485 0 0;
    -1029.0785613485 -50 0];
headings = [-90;-90;-90];
laneSpecification = lanespec([1 1]);
road(scenario, roadCenters, 'Heading', headings, 'Lanes', laneSpecification, 'Name', 'road_Crossing');

rg = driving.scenario.RoadGroup('Name', 'road_Crossing');
Centers = [0.581265785766681 26.4456070873056 0;
    -8.48464869165825 26.5120053667528 0;
    -17.5505631690832 26.5784036462001 0];
marking = [laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)];
lanetypes = [laneType('Shoulder')
    laneType('Driving')];
laneSpecification = lanespec(2, 'Width', [0.5 3.5], 'Marking', marking, 'Type', lanetypes);
headings = [179.58037623573;179.58037623573;179.58037623573];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [0.610560789100583 30.4454998112145 0;
    -8.45535368832435 30.5118980906618 0;
    -17.5212681657493 30.578296370109 0];
marking = [laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')
    laneMarking('Unmarked')];
lanetypes = [laneType('Driving')
    laneType('Shoulder')];
laneSpecification = lanespec(2, 'Width', [3.5 0.5], 'Marking', marking, 'Type', lanetypes);
headings = [179.58037623573;179.58037623573;179.58037623573];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [0.634857332490637 33.7629108391065 0;
    0.503029471587062 33.7638763394062 0;
    -3.15250026702874 37.4462766788313 0;
    -3.15250026702874 37.578110230322 0];
marking = laneMarking('Unmarked');
lanetypes = [laneType('Border')
    laneType('Border')];
laneSpecification = lanespec(2, 'Width', [0.635 2], 'Marking', marking, 'Type', lanetypes);
headings = [179.58037623573;179.58037623573;90;90];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [0.608729851392214 30.1955065159702 0;
    0.313225216197502 30.1976707763316 0;
    -6.72000026702881 37.2825947657759 0;
    -6.72000026702874 37.4462766788313 0;
    -6.72000026702874 37.578110230322 0];
marking = [laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')];
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [179.58037623573;179.58037623573;90;90;90];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [0.58309672347505 26.6956003825499 0;
    -1.75149733139273 26.7126988262683 0;
    -1.87456268850398 26.7136001504527 0;
    -7.77931095802717 29.1974064907698 0;
    -10.2200002670288 35.1201449386657 0;
    -10.2200002670288 37.578110230322 0];
marking = [laneMarking('Unmarked')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)];
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [179.58037623573;179.58037623573;179.58037623573;134.791940396756;90;90];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [0.608729851392214 30.1955065159702 0;
    -1.86690316500927 30.2136379216038 0;
    -7.76976772481547 27.806396788854 0;
    -10.2200002670288 21.9212817709416 0;
    -10.2200002670287 21.8141331071747 0;
    -10.2200002670287 21.7804328630153 0;
    -10.2200002670287 19.5776265124704 0;
    -10.2200002670287 19.4457947248646 0];
marking = [laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')];
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [179.58037623573;179.58037623573;-135.208224638368;-90;270;270;270;270];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [-3.15250026702881 19.4457947248646 0;
    -2.06436818564143 22.059233405297 0;
    0.556822018978652 23.1281971347266 0];
marking = laneMarking('Unmarked');
lanetypes = [laneType('Border')
    laneType('Border')];
laneSpecification = lanespec(2, 'Width', [0.635 2], 'Marking', marking, 'Type', lanetypes);
headings = [90;44.7901910199404;-0.4173330634962];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [-6.72000026702881 19.4457947248646 0;
    -6.72000026702881 19.5908332924588 0;
    0.438062045673907 26.6966626088799 0;
    0.582742666929857 26.6956029756411 0];
marking = laneMarking('Unmarked');
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [90;90;-0.419623764269972;-0.419623764269972];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [-6.72000026702874 37.578110230322 0;
    -6.72000026702875 37.4462766788313 0;
    -6.72000026702875 35.2434723983415 0;
    -6.72000026702881 35.2095113144493 0;
    -6.72000026702881 35.1026241991403 0;
    -9.17023219652028 29.2175080342637 0;
    -15.0730974710967 26.8102655230382 0;
    -15.1802432825957 26.8110502533104 0;
    -15.2143951574049 26.8113003798402 0;
    -17.4169039190138 26.827431437838 0;
    -17.5487322313749 26.8283969414444 0];
marking = [laneMarking('Unmarked')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)];
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [270;270;270;270;270;224.791793454207;179.58037623573;539.58037623573;539.58037623573;539.58037623573;539.58037623573];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [-17.5227450468461 30.3283004817724 0;
    -17.378064398802 30.3272408483374 0;
    -10.2200002670288 37.4330716358734 0;
    -10.2200002670288 37.578110230322 0];
marking = laneMarking('Unmarked');
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [359.58037623573;359.58037623573;90;90];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [-13.7875002670288 37.578110230322 0;
    -14.8756331711922 34.9646703821461 0;
    -17.4968243989065 33.895706322687 0];
marking = laneMarking('Unmarked');
lanetypes = [laneType('Border')
    laneType('Border')];
laneSpecification = lanespec(2, 'Width', [0.635 2], 'Marking', marking, 'Type', lanetypes);
headings = [-90;-135.209812248607;-180.41733306368];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [-17.5748597124733 23.2609926183081 0;
    -17.4430314001117 23.2600271147014 0;
    -14.8565618085271 22.1719937879878 0;
    -13.7875002670287 19.5776265124704 0;
    -13.7875002670287 19.4457947248646 0];
marking = laneMarking('Unmarked');
lanetypes = [laneType('Border')
    laneType('Border')];
laneSpecification = lanespec(2, 'Width', [0.635 2], 'Marking', marking, 'Type', lanetypes);
headings = [359.58037623573;-0.419623764270074;-45.2097973014633;270;270];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [-6.72000026702875 19.4457947248646 0;
    -6.72000026702875 19.5776265124704 0;
    -6.72000026702881 21.7804328630153 0;
    -6.72000026702881 21.9037603063256 0;
    -9.16069007479556 27.8264979682009 0;
    -15.0654378936986 30.3103032937945 0;
    -15.1887620294878 30.3112065132605 0;
    -17.3912707910967 30.3273375712583 0;
    -17.5230991034578 30.3283030748647 0];
marking = [laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')];
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [450;450;450;90;134.791954003071;539.58037623573;539.58037623573;539.58037623573;539.58037623573];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [-10.2200002670287 19.4457947248646 0;
    -10.2200002670288 19.5779699980636 0;
    -10.2200002670288 19.7413084337526 0;
    -17.2532263875202 26.8262326722302 0;
    -17.4169039190138 26.827431437838 0;
    -17.5487322313749 26.8283969414444 0];
marking = [laneMarking('Unmarked')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)];
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [450;90;90;179.58037623573;539.58037623573;539.58037623573];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [-6.47000026702875 19.4457947248646 0;
    -6.47000026702875 19.5776265124704 0;
    -6.47000026702875 21.7804328630153 0;
    -6.47000026702875 21.8141331071747 0;
    -6.47000026702875 35.2097728842621 0;
    -6.47000026702875 35.2434723983415 0;
    -6.47000026702874 37.4462766788313 0;
    -6.47000026702874 37.578110230322 0];
marking = [laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')
    laneMarking('Unmarked')];
lanetypes = [laneType('Driving')
    laneType('Shoulder')];
laneSpecification = lanespec(2, 'Width', [3.5 0.5], 'Marking', marking, 'Type', lanetypes);
headings = [450;450;450;450;450;450;450;450];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [-10.4700002670287 19.4457947248646 0;
    -10.4700002670287 19.5776265124704 0;
    -10.4700002670287 21.7804328630153 0;
    -10.4700002670287 21.8141331071747 0;
    -10.4700002670287 35.2097728842621 0;
    -10.4700002670287 35.2434723983415 0;
    -10.4700002670287 37.4462766788313 0;
    -10.4700002670287 37.578110230322 0];
marking = [laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)];
lanetypes = [laneType('Shoulder')
    laneType('Driving')];
laneSpecification = lanespec(2, 'Width', [0.5 3.5], 'Marking', marking, 'Type', lanetypes);
headings = [450;450;450;450;450;450;450;450];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

roadGroup(scenario, rg);

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-108.503802947502 27.56678161045 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'car_058');
waypoints = [-108.503802947502 27.56678161045 0;
    -92.4 27.5 0;
    -57.8 26.4 0;
    -38.1 26.7 0;
    -25.7 26.7 0;
    -14.5 23.9 0;
    -10 17.1 0;
    -10.2 6.1 0];
speed = [30;30;30;30;30;30;30;30];
trajectory(egoVehicle, waypoints, speed);

% Add the non-ego actors
pedestrian_001 = actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-26.7 13.5 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'Name', 'pedestrian_001');
waypoints = [-26.7 13.5 0;
    -20.5 12 0;
    -15.8 14.1 0;
    -9.3 18.1 0;
    -0.3 22 0;
    4.5 30.1 0;
    7.5 43.8 0];
speed = [1.5;1.5;1.5;1.5;1.5;1.5;1.5];
trajectory(pedestrian_001, waypoints, speed);

