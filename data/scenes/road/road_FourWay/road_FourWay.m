function [allData, scenario, sensor] = road_FourWay()
%scenario_dsd - Returns sensor detections
%    allData = scenario_dsd returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = scenario_dsd optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.14 (R2023a) and Automated Driving Toolbox 3.7 (R2023a).
% Generated on: 17-Jun-2023 14:21:50

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
sensor = createSensor(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;

    % Generate detections for the sensor
    laneDetections = [];
    ptClouds = [];
    insMeas = [];
    [objectDetections, isValidTime] = sensor(poses, time);
    numObjects = length(objectDetections);
    objectDetections = objectDetections(1:numObjects);

    % Aggregate all detections into a structure for later use
    if isValidTime
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release the sensor object so it can be used again.
release(sensor);

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function sensor = createSensor(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensor = visionDetectionGenerator('SensorIndex', 1, ...
    'UpdateInterval', 0.3, ...
    'SensorLocation', [1.9 0], ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([800 800],[320 240],[480 640]), ...
    'ActorProfiles', profiles);

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = ia_drivingScenario('SampleTime', 0.3);

% Add all road segments
roadCenters = [-64.909996032715 -6.5999999046326 0;
    -35.69658780664 -3.2214267389706 0;
    -6.3274556629266 -1.7074736537973 0];
headings = [8.42008048565141;4.77398372101118;1.12788695637095];
marking = [laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')];
lanetypes = [laneType('Border')
    laneType('Border')
    laneType('Driving')
    laneType('Driving')
    laneType('Border')
    laneType('Border')];
laneSpecification = lanespec([3 3], 'Width', [2 0.635 3.5 3.5 0.635 2], 'Marking', marking, 'Type', lanetypes);
road(scenario, roadCenters, 'Heading', headings, 'Lanes', laneSpecification, 'Name', 'road_FourWay');

roadCenters = [11.323029938095 -1.6970525805402 0;
    61.854763549256 -5.4098642971236 0;
    72.329977548958 -6.759996622367 0];
headings = [-1.06023063690793;-7.34426502764143;-7.34426502764143];
marking = [laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')];
lanetypes = [laneType('Border')
    laneType('Border')
    laneType('Driving')
    laneType('Driving')
    laneType('Border')
    laneType('Border')];
laneSpecification = lanespec([3 3], 'Width', [2 0.635 3.5 3.5 0.635 2], 'Marking', marking, 'Type', lanetypes);
road(scenario, roadCenters, 'Heading', headings, 'Lanes', laneSpecification, 'Name', 'Road1');

roadCenters = [-2.8899998664856 60.209999084473 0;
    1.5251665063894 33.673756428287 0;
    2.9805187100118 6.8121142898859 0];
headings = [-77.3808943898287;-83.72614575859;-90.0713971273513];
marking = [laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')];
lanetypes = [laneType('Border')
    laneType('Border')
    laneType('Driving')
    laneType('Driving')
    laneType('Border')
    laneType('Border')];
laneSpecification = lanespec([3 3], 'Width', [2 0.635 3.5 3.5 0.635 2], 'Marking', marking, 'Type', lanetypes);
road(scenario, roadCenters, 'Heading', headings, 'Lanes', laneSpecification, 'Name', 'Road2');

roadCenters = [2.3170208432833 -10.83370641144 0;
    1.900861036082 -15.769750047918 0;
    -3.5499927073935 -73.399924927572 0];
headings = [-94.2353140767912;-95.4031515662893;-95.4031515662893];
marking = [laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')];
lanetypes = [laneType('Border')
    laneType('Border')
    laneType('Driving')
    laneType('Driving')
    laneType('Border')
    laneType('Border')];
laneSpecification = lanespec([3 3], 'Width', [2 0.635 3.5 3.5 0.635 2], 'Marking', marking, 'Type', lanetypes);
road(scenario, roadCenters, 'Heading', headings, 'Lanes', laneSpecification, 'Name', 'Road3');

roadCenters = [-85.808342428976 50 0;
    -85.808342428976 0 0;
    -85.808342428976 -50 0];
headings = [-90;-90;-90];
laneSpecification = lanespec([1 1]);
road(scenario, roadCenters, 'Heading', headings, 'Lanes', laneSpecification, 'Name', 'Road4');

rg = driving.scenario.RoadGroup('Name', 'Roadgroup');
Centers = [-6.36190278475672 0.0421872835839303 0;
    2.49670416637858 0.131997826948582 0;
    11.3554109920781 0.0526478130538677 0];
marking = [laneMarking('Unmarked')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)];
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [1.12788695637095;0.0338281597315091;-1.06023063690794];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [-6.29300854109664 -3.45713459117845 0;
    2.49877061094375 -3.36800156302377 0;
    11.290648884112 -3.4467529741341 0];
marking = [laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')];
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [1.12788695637095;0.0338281597315091;-1.06023063690794];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [-6.42228366830737 3.10909295525067 0;
    -5.4547003054519 3.12713975917266 0;
    -2.89448205619109 4.22643374882301 0;
    -2.89445876527337 4.22645741973939 0;
    -1.83699535444149 6.80415748858002 0;
    -1.83697754967577 6.81811744709778 0];
marking = laneMarking('Unmarked');
lanetypes = [laneType('Border')
    laneType('Border')];
laneSpecification = lanespec(2, 'Width', [2 0.635], 'Marking', marking, 'Type', lanetypes);
headings = [1.12788695637095;1.01135556159922;45.4636072039057;45.4636072039058;89.925245206203;89.9286028726487];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [1.23052006871377 6.81429499048184 0;
    1.23050196447335 6.80010146735094 0;
    1.23028243471573 6.63187182609915 0;
    -0.658802273441692 2.02692028727232 0;
    -5.23261007971717 0.0630760570459921 0;
    -5.40082532090941 0.06011289666575 0;
    -5.70572641715555 0.0546417327416453 0;
    -5.74587113163573 0.0539064383027417 0;
    -6.36190278475664 0.0421872835838824 0];
marking = [laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')];
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [269.928602872649;269.925232430173;269.925232430173;225.465045047184;181.009177440733;181.009178867478;181.046838425177;181.051796893274;181.127886956371];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [-6.29300854109664 -3.45713459117845 0;
    -5.68161272611668 -3.44550363447397 0;
    -4.05151433075029 -3.41557607699135 0;
    1.78593016292682 -1.4660526349386 0;
    1.99214880456241 -1.31686511093428 0;
    4.70984194052286 3.91893620103214 0;
    4.73051735130977 6.80993358928988 0];
marking = [laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')];
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [1.12788695637095;1.05179547473309;1.05179547473306;35.8836111487809;35.8836111487809;89.2518920063312;89.9286028726487];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [-6.36190278475672 0.0421872835839303 0;
    -2.88503415560914 0.0976058483729867 0;
    2.17225464078657 -2.78830839916861 0;
    2.55020866604942 -3.44603695048652 0;
    2.92816269131227 -4.10376550180442 0;
    4.16792403394726 -9.47427039178008 0;
    4.06224185168657 -10.9629489424737 0];
marking = [laneMarking('Unmarked')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)];
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [1.12788695637095;0.694793771808745;299.883194449383;299.883194449383;299.883194449383;-93.8859847673392;-94.2353140767912];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [-6.23261645255113 -6.52404004224269 0;
    -3.48649362796814 -7.67345094505808 0;
    -3.48622465867838 -7.67373489655273 0;
    -2.48731573257645 -10.4778182760175 0];
marking = laneMarking('Unmarked');
lanetypes = [laneType('Border')
    laneType('Border')];
laneSpecification = lanespec(2, 'Width', [0.635 2], 'Marking', marking, 'Type', lanetypes);
headings = [1.12788555247898;-46.5521339338031;-46.5521339338031;-94.2326435999519];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [-6.29299726095481 -3.45713436909646 0;
    -6.26817582675526 -3.45664568818403 0;
    -1.25127206968877 -5.55654300516338 0;
    0.573628055926994 -10.6797766748165 0;
    0.571823925101336 -10.7041385805814 0];
marking = laneMarking('Unmarked');
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [1.12788555247898;1.12788555247898;-46.5527856039647;-94.235331040313;-94.235331040313];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [1.23052006871377 6.81429499048184 0;
    1.23050203467588 6.80015526944867 0;
    1.22869229846982 6.12884997664232 0;
    1.22713058914974 5.8011751387863 0;
    1.22402619908125 5.23104821013171 0;
    3.09616853430332 -0.545017333932448 0;
    3.26132621056144 -0.770436029755349 0;
    8.37433959265782 -3.4020209461967 0;
    10.0776968067939 -3.42590367296085 0;
    10.3566001892185 -3.43041470853675 0;
    11.0049341401245 -3.44155404589257 0;
    11.2906488841121 -3.44675297413421 0];
marking = [laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')];
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [269.928602872649;269.925245206203;269.765834257766;269.688022645297;269.688022645297;306.2291414308;306.2291414308;359.302697272001;359.090722760848;359.056013484168;358.975327542883;358.939769363092];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [4.73051688729297 6.80956128042013 0;
    4.73031002966503 6.64358901461771 0;
    6.61200373955226 2.0282411723316 0;
    11.1891641026354 0.0557244876609377 0;
    11.355425768777 0.0526475395866459 0];
marking = laneMarking('Unmarked');
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [269.928590099998;269.928590099998;314.433203378794;358.939767537944;358.939767537944];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [11.4121852282425 3.11962237054975 0;
    11.4121105127334 3.11962375328425 0;
    8.85093619131301 4.22337313214025 0;
    7.798014702245 6.80589574097933 0];
marking = laneMarking('Unmarked');
lanetypes = [laneType('Border')
    laneType('Border')];
laneSpecification = lanespec(2, 'Width', [0.635 2], 'Marking', marking, 'Type', lanetypes);
headings = [178.939767537944;178.939767537944;134.432553538056;89.9299190063204];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [0.571799834880062 -10.7044638804064 0;
    0.805350835132744 -7.20570524894168 0;
    3.85675336321838 -2.10403660546467 0;
    4.95000908987206 -1.43049614107145 0;
    10.4142624352059 0.0691102685690934 0;
    11.0675244820375 0.0578862592275526 0;
    11.3554109920783 0.052647813053754 0];
marking = [laneMarking('Unmarked')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)];
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [85.7646859232088;86.594472718483;31.6366760089183;31.6366760089183;359.056013484168;358.975327542883;358.939769363092];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [11.2338895223443 -6.51372780690533 0;
    10.9499413248387 -6.50856106638877 0;
    8.39599924999835 -7.47612658986352 0;
    7.21090847155359 -9.93729562061148 0;
    7.1213649621305 -11.189492636157 0];
marking = laneMarking('Unmarked');
lanetypes = [laneType('Border')
    laneType('Border')];
laneSpecification = lanespec(2, 'Width', [2 0.635], 'Marking', marking, 'Type', lanetypes);
headings = [178.939769363092;178.976506930708;222.522058094795;266.054879533539;-94.2353140767912];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [11.2906488841119 -3.44675297413416 0;
    11.0046529427361 -3.44154901643897 0;
    10.8004131123316 -3.43789601413232 0;
    6.2678177693335 -5.15489970233898 0;
    4.16474649914036 -9.52224042285836 0;
    4.15067690324953 -9.72625297459639 0;
    4.06224185168654 -10.9629489424737 0];
marking = [laneMarking('Unmarked')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)];
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [178.939769363092;178.975325724581;178.975325724581;222.519300288722;266.054879533539;-93.9451037950277;-94.2353140767912];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [4.73051735130979 6.80993358928997 0;
    4.55785081148415 -2.08257913142401 0;
    4.06224185168657 -10.9629489424737 0];
marking = [laneMarking('Unmarked')
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)];
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [-90.0713971273513;-92.1533556020712;-94.2353140767912];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [1.23052006871376 6.81429499048184 0;
    1.06032238294894 -1.95106908774659 0;
    0.571799834880091 -10.7044638804064 0];
marking = [laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')];
laneSpecification = lanespec(1, 'Width', 3.5, 'Marking', marking);
headings = [-90.0713971273513;-92.1533556020712;-94.2353140767912];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

roadGroup(scenario, rg);

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-59.6900378936333 -9.20430761898828 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'car_058');
waypoints = [-59.6900378936333 -9.20430761898828 0;
    -40.4 -7.3 0;
    -29.5 -6.6 0;
    -15 -5 0;
    -6.9 -5.3 0;
    -2.9 -6.2 0;
    0.3 -10.6 0;
    0.2 -16.2 0;
    -1.4 -21.8 0];
speed = [30;30;30;30;30;30;30;30;30];
trajectory(egoVehicle, waypoints, speed);

% Add the non-ego actors
pedestrian_001 = actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-14.6 -13.8 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'Name', 'pedestrian_001');
waypoints = [-14.6 -13.8 0;
    -9.6 -12.8 0;
    -5.4 -12.4 0;
    -0.3 -11.5 0;
    5.4 -10.4 0;
    11 -6.9 0;
    14.4 -0.9 0];
speed = [6;6;6;6;6;6;6];
trajectory(pedestrian_001, waypoints, speed);

truck_001 = vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [60.9 -1.6 0], ...
    'Mesh', driving.scenario.truckMesh, ...
    'Name', 'truck_001');
waypoints = [60.9 -1.6 0;
    55.6 -1 0;
    49.7 -0.2 0;
    44.3 0.2 0;
    38.3 0.7 0;
    32.3 1.1 0;
    26.4 1.4 0;
    19.4 1.7 0;
    13.1 2.1 0;
    5.9 3.6 0;
    5.7 14 0;
    5.8 24.1 0];
speed = [30;30;30;30;30;30;30;30;30;30;30;30];
trajectory(truck_001, waypoints, speed);

actor(scenario, ...
    'ClassID', 3, ...
    'Length', 1.7, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-12 1.7 0], ...
    'Mesh', driving.scenario.bicycleMesh, ...
    'Name', 'deer_001');

