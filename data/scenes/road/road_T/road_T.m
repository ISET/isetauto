function [allData, scenario, sensor] = road_T()
%road_T - Returns sensor detections
%    allData = road_T returns sensor detections in a structure
%    with time for an internally defined scenario and sensor suite.
%
%    [allData, scenario, sensors] = road_T optionally returns
%    the drivingScenario and detection generator objects.

% Generated by MATLAB(R) 9.14 (R2023a) and Automated Driving Toolbox 3.7 (R2023a).
% Generated on: 14-Jun-2023 16:38:05

% Create the drivingScenario object and ego car
[scenario, egoVehicle] = createDrivingScenario;

% Create all the sensors
sensor = createSensor(scenario);

allData = struct('Time', {}, 'ActorPoses', {}, 'ObjectDetections', {}, 'LaneDetections', {}, 'PointClouds', {}, 'INSMeasurements', {});
running = true;
while running

    % Generate the target poses of all actors relative to the ego vehicle
    poses = targetPoses(egoVehicle);
    time  = scenario.SimulationTime;

    % Generate detections for the sensor
    laneDetections = [];
    ptClouds = [];
    insMeas = [];
    [objectDetections, isValidTime] = sensor(poses, time);
    numObjects = length(objectDetections);
    objectDetections = objectDetections(1:numObjects);

    % Aggregate all detections into a structure for later use
    if isValidTime
        allData(end + 1) = struct( ...
            'Time',       scenario.SimulationTime, ...
            'ActorPoses', actorPoses(scenario), ...
            'ObjectDetections', {objectDetections}, ...
            'LaneDetections', {laneDetections}, ...
            'PointClouds',   {ptClouds}, ... %#ok<AGROW>
            'INSMeasurements',   {insMeas}); %#ok<AGROW>
    end

    % Advance the scenario one time step and exit the loop if the scenario is complete
    running = advance(scenario);
end

% Restart the driving scenario to return the actors to their initial positions.
restart(scenario);

% Release the sensor object so it can be used again.
release(sensor);

%%%%%%%%%%%%%%%%%%%%
% Helper functions %
%%%%%%%%%%%%%%%%%%%%

% Units used in createSensors and createDrivingScenario
% Distance/Position - meters
% Speed             - meters/second
% Angles            - degrees
% RCS Pattern       - dBsm

function sensor = createSensor(scenario)
% createSensors Returns all sensor objects to generate detections

% Assign into each sensor the physical and radar profiles for all actors
profiles = actorProfiles(scenario);
sensor = visionDetectionGenerator('SensorIndex', 1, ...
    'SensorLocation', [1.9 0], ...
    'DetectorOutput', 'Objects only', ...
    'Intrinsics', cameraIntrinsics([800 799.999999999999],[320 240],[480 640]), ...
    'ActorProfiles', profiles);

function [scenario, egoVehicle] = createDrivingScenario
% createDrivingScenario Returns the drivingScenario defined in the Designer

% Construct a drivingScenario object.
scenario = ia_drivingScenario;

% Add all road segments
roadCenters = [-29.689998626709 -12.469999313354 0;
    -17.990366738039 -7.3475206726304 0;
    -12.195849117726 -4.8539342738969 0];
headings = [23.6453641963108;23.6453641963108;22.9224836617437];
marking = [laneMarking('Unmarked')
    laneMarking('Solid', 'Width', 0.25)
    laneMarking('Solid', 'Width', 0.125)
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Solid', 'Width', 0.125)
    laneMarking('Solid', 'Width', 0.25)
    laneMarking('Unmarked')];
lanetypes = [laneType('Border')
    laneType('Shoulder')
    laneType('Driving')
    laneType('Driving')
    laneType('Shoulder')
    laneType('Border')];
laneSpecification = lanespec([3 3], 'Width', [0.25 0.5 4.5 4.5 0.5 0.25], 'Marking', marking, 'Type', lanetypes);
road(scenario, roadCenters, 'Heading', headings, 'Lanes', laneSpecification, 'Name', 'road_T');

roadCenters = [12.641561375629 -3.7644298666219 0;
    13.074441490769 -3.9378166310413 0;
    13.504520541835 -4.1180391989773 0];
headings = [-21.3743359854144;-22.2820371020734;-23.1897382187323];
marking = [laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Solid', 'Width', 0.25)
    laneMarking('Solid', 'Width', 0.125)
    laneMarking('Solid', 'Width', 0.25)
    laneMarking('Unmarked')];
lanetypes = [laneType('Border')
    laneType('Restricted')
    laneType('Driving')
    laneType('Shoulder')
    laneType('Border')];
laneSpecification = lanespec(5, 'Width', [0.25 4 4.09216980241276 0.5 0.25], 'Marking', marking, 'Type', lanetypes);
road(scenario, roadCenters, 'Heading', headings, 'Lanes', laneSpecification, 'Name', 'Road1');

roadCenters = [8.5281659856085 10.190141677997 0;
    8.3044289426262 9.7978036987743 0;
    8.0745336919249 9.4090421676939 0];
headings = [-119.242933783398;-120.146357730537;-121.049781677677];
marking = [laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Solid', 'Width', 0.25)
    laneMarking('Solid', 'Width', 0.125)
    laneMarking('Solid', 'Width', 0.25)
    laneMarking('Unmarked')];
lanetypes = [laneType('Border')
    laneType('Restricted')
    laneType('Shoulder')
    laneType('Driving')
    laneType('Shoulder')
    laneType('Border')];
laneSpecification = lanespec(6, 'Width', [0.25 4 1 4.07231410243615 0.5 0.25], 'Marking', marking, 'Type', lanetypes);
road(scenario, roadCenters, 'Heading', headings, 'Lanes', laneSpecification, 'Name', 'Road2');

roadCenters = [9.4938406418447 42.679779343877 0;
    9.7958859436717 41.759942877138 0;
    10.097931245499 40.840106410398 0];
headings = [-71.8214500245733;-71.8214500245733;-71.8214500245733];
marking = [laneMarking('Unmarked')
    laneMarking('Solid', 'Width', 0.25)
    laneMarking('Solid', 'Width', 0.125)
    laneMarking('Solid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')
    laneMarking('Solid', 'Width', 0.349999994039536)
    laneMarking('Solid', 'Width', 0.125)
    laneMarking('Unmarked')
    laneMarking('Unmarked')];
lanetypes = [laneType('Border')
    laneType('Border')
    laneType('Driving')
    laneType('Driving')
    laneType('Shoulder')
    laneType('Driving')
    laneType('Shoulder')
    laneType('Border')];
laneSpecification = lanespec(8, 'Width', [0.3 2 1.5 1.5 1 3.5 0.5 0.25], 'Marking', marking, 'Type', lanetypes);
road(scenario, roadCenters, 'Heading', headings, 'Lanes', laneSpecification, 'Name', 'Road3');

roadCenters = [21.165118876107 9.5405497338447 0;
    22.106066670536 6.675025624121 0;
    23.047014464965 3.8095015143973 0];
headings = [-71.8214500245733;-71.8214500245733;-71.8214500245733];
marking = [laneMarking('Unmarked')
    laneMarking('Solid', 'Width', 0.25)
    laneMarking('Solid', 'Width', 0.125)
    laneMarking('Solid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')
    laneMarking('Solid', 'Width', 0.349999994039536)
    laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Unmarked')];
lanetypes = [laneType('Border')
    laneType('Border')
    laneType('Driving')
    laneType('Driving')
    laneType('Shoulder')
    laneType('Driving')
    laneType('Shoulder')
    laneType('Border')];
laneSpecification = lanespec(8, 'Width', [0.3 3.5 1.5 1.5 1 3.5 0.5 0.25], 'Marking', marking, 'Type', lanetypes);
road(scenario, roadCenters, 'Heading', headings, 'Lanes', laneSpecification, 'Name', 'Road4');

roadCenters = [32.631596424421 -27.783000241177 0;
    32.967717789267 -28.806610563091 0;
    33.303839154113 -29.830220885005 0];
headings = [-71.8214500245733;-71.8214500245733;-71.8214500245733];
marking = [laneMarking('Unmarked')
    laneMarking('Solid', 'Width', 0.25)
    laneMarking('Solid', 'Width', 0.125)
    laneMarking('Solid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Unmarked')
    laneMarking('Solid', 'Width', 0.349999994039536)
    laneMarking('Solid', 'Width', 0.125)
    laneMarking('Unmarked')
    laneMarking('Unmarked')];
lanetypes = [laneType('Border')
    laneType('Border')
    laneType('Driving')
    laneType('Driving')
    laneType('Shoulder')
    laneType('Driving')
    laneType('Shoulder')
    laneType('Border')];
laneSpecification = lanespec(8, 'Width', [0.3 2 1.5 1.5 1 3.5 0.5 0.25], 'Marking', marking, 'Type', lanetypes);
road(scenario, roadCenters, 'Heading', headings, 'Lanes', laneSpecification, 'Name', 'Road5');

rg = driving.scenario.RoadGroup('Name', 'Roadgroup');
Centers = [32.7503575387815 -27.7440028346499 0;
    27.6017832159721 -12.0647441764451 0;
    22.4532088931628 3.6145144817597 0];
marking = [laneMarking('Unmarked')
    laneMarking('Solid', 'Width', 0.125)
    laneMarking('Solid', 'Width', 0.349999994039536)
    laneMarking('Unmarked')
    laneMarking('Solid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Solid', 'Width', 0.125)
    laneMarking('Solid', 'Width', 0.25)
    laneMarking('Unmarked')];
lanetypes = [laneType('Shoulder')
    laneType('Driving')
    laneType('Shoulder')
    laneType('Driving')
    laneType('Driving')
    laneType('Border')
    laneType('Border')];
laneSpecification = lanespec(7, 'Width', [0.5 3.5 1 1.5 1.5 2 0.3], 'Marking', marking, 'Type', lanetypes);
headings = [108.178549975427;108.178549975427;108.178549975427];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [17.4414898671534 1.9688239262981 0;
    17.9240925152814 0.499125467132214 0;
    17.6625482512 -0.487042803221847 0;
    16.6498991179797 -0.655813538856388 0;
    15.2460896748305 -0.0544288431021462 0];
marking = laneMarking('Unmarked');
lanetypes = laneType('Border');
laneSpecification = lanespec(1, 'Width', 0.25, 'Marking', marking, 'Type', lanetypes);
headings = [-71.8214500245733;-71.8214500245733;-137.885767903063;156.80995871018;156.80995871018];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [13.4603995497122 -4.22103212672301 0;
    13.5794143325419 -4.27232826595064 0;
    14.9173398214177 -4.89519723508539 0;
    28.9291658323737 -21.1014411364719 0;
    30.614838640178 -26.2349204861966 0;
    31.2699950698404 -28.2301072074515 0];
marking = [laneMarking('Unmarked')
    laneMarking('Solid', 'Width', 0.25)
    laneMarking('Solid', 'Width', 0.125)
    laneMarking('Solid', 'Width', 0.25)
    laneMarking('Unmarked')];
lanetypes = [laneType('Restricted')
    laneType('Driving')
    laneType('Shoulder')
    laneType('Border')];
laneSpecification = lanespec(4, 'Width', [4 4.06626090095568 0.5 0.25], 'Marking', marking, 'Type', lanetypes);
headings = [336.810261781268;336.557030333269;333.514462612866;288.178549975427;288.178549975427;288.178549975427];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

roadGroup(scenario, rg);

rg = driving.scenario.RoadGroup('Name', 'Roadgroup1');
Centers = [-11.1734499265779 -7.27164494598747 0;
    -9.51556136194189 -6.57408969874491 0;
    -9.24635088941971 -6.4613921268292 0;
    -8.55328774253141 -6.17126027160542 0;
    11.7927656592774 -5.93316022544736 0];
marking = [laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Solid', 'Width', 0.125)
    laneMarking('Solid', 'Width', 0.25)
    laneMarking('Unmarked')];
lanetypes = [laneType('Driving')
    laneType('Shoulder')
    laneType('Border')];
laneSpecification = lanespec(3, 'Width', [4.5 0.5 0.25], 'Marking', marking, 'Type', lanetypes);
headings = [22.9224836617437;22.7152844996336;22.7152844996337;22.7152844996337;-21.3743359854144];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [-12.2445347934947 -4.73880519427361 0;
    -10.5774797175689 -4.03739314496034 0;
    -10.3080319537638 -3.92459623756499 0;
    -5.53535088791314 -1.9266443651509 0;
    7.78424033560888 9.58381147626379 0];
marking = [laneMarking('Unmarked')
    laneMarking('Solid', 'Width', 0.25)
    laneMarking('Solid', 'Width', 0.125)
    laneMarking('DoubleSolid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Solid', 'Width', 0.125)
    laneMarking('Solid', 'Width', 0.25)];
lanetypes = [laneType('Border')
    laneType('Shoulder')
    laneType('Driving')
    laneType('Border')
    laneType('Shoulder')];
laneSpecification = lanespec(5, 'Width', [0.25 0.5 4.5 4.5 0.5], 'Marking', marking, 'Type', lanetypes);
headings = [22.9224836617437;22.7152844996336;22.7152844996337;22.7152844996338;58.9502183223231];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [14.2530288580647 0.352506407168393 0;
    10.9279319157112 1.65389930625482 0;
    10.1691007861611 2.46627237716736 0;
    10.3026847041574 3.58830056285841 0;
    12.2817700405383 6.87554140796131 0];
marking = laneMarking('Unmarked');
lanetypes = laneType('Border');
laneSpecification = lanespec(1, 'Width', 0.25, 'Marking', marking, 'Type', lanetypes);
headings = [158.625372929026;158.625372929026;107.471199834429;58.9499312090718;58.9499312090718];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

roadGroup(scenario, rg);

rg = driving.scenario.RoadGroup('Name', 'Roadgroup2');
Centers = [12.8133479786237 7.79083367552985 0;
    13.5150187088009 9.04410531053997 0;
    14.4069513300533 9.46236567474767 0;
    15.2119847112193 8.75846817107946 0;
    15.5594264342332 7.70038329122187 0];
marking = laneMarking('Unmarked');
lanetypes = laneType('Border');
laneSpecification = lanespec(1, 'Width', 0.25, 'Marking', marking, 'Type', lanetypes);
headings = [60.7567906378237;60.7567906378237;-10.5095372546147;-71.8214500245733;-71.8214500245733];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [7.58019562105785 40.0133613920143 0;
    8.23535205072029 38.0181746707593 0;
    9.09463521401644 35.4013487043413 0;
    10.5276118334112 28.3812317278858 0;
    10.6356240026628 26.293232222396 0;
    8.40612503002455 14.1867771964104 0;
    7.54835685021106 12.2726670921076 0;
    6.92367205676683 11.0884415291575 0];
marking = [laneMarking('Unmarked')
    laneMarking('Solid', 'Width', 0.349999994039536)
    laneMarking('Solid', 'Width', 0.125)
    laneMarking('Unmarked')
    laneMarking('Unmarked')];
lanetypes = [laneType('Shoulder')
    laneType('Driving')
    laneType('Shoulder')
    laneType('Border')];
laneSpecification = lanespec(4, 'Width', [1 3.5 0.5 0.25], 'Marking', marking, 'Type', lanetypes);
headings = [288.178549975427;288.178549975427;288.178549975427;274.895387555129;271.027152192022;248.103733079487;243.619200300157;240.757066216602];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

Centers = [21.2838799904679 9.57954714037221 0;
    16.1065695182447 25.3463176982313 0;
    10.9292590460215 41.1130882560905 0];
marking = [laneMarking('Unmarked')
    laneMarking('Unmarked')
    laneMarking('Solid', 'Width', 0.349999994039536)
    laneMarking('Unmarked')
    laneMarking('Solid', 'Color', [0.98 0.86 0.36], 'Width', 0.125)
    laneMarking('Solid', 'Width', 0.125)
    laneMarking('Solid', 'Width', 0.25)
    laneMarking('Unmarked')];
lanetypes = [laneType('Shoulder')
    laneType('Driving')
    laneType('Shoulder')
    laneType('Driving')
    laneType('Driving')
    laneType('Border')
    laneType('Border')];
laneSpecification = lanespec(7, 'Width', [0.5 3.5 1 1.5 1.5 3.5 0.3], 'Marking', marking, 'Type', lanetypes);
headings = [108.178549975427;108.178549975427;108.178549975427];
road(rg, Centers, 'Lanes', laneSpecification, 'Heading', headings);

roadGroup(scenario, rg);

% Add the ego vehicle
egoVehicle = vehicle(scenario, ...
    'ClassID', 1, ...
    'Position', [-22.2 -11.8 0], ...
    'Mesh', driving.scenario.carMesh, ...
    'Name', 'car_058');
waypoints = [-22.2 -11.8 0;
    -14.9 -8.7 0;
    -6.7 -5.7 0;
    -0.7 -4.8 0;
    5.2 -4.7 0;
    11.5 -5.5 0;
    17.4 -7.6 0;
    23.2 -13.1 0;
    26.9 -19.1 0;
    30.3 -25.6 0];
speed = [17;17;17;17;17;17;17;17;17;17];
trajectory(egoVehicle, waypoints, speed);

% Add the non-ego actors
pedestrian_001 = actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [9.9 -9.7 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'Name', 'pedestrian_001');
waypoints = [9.9 -9.7 0;
    10.6 -6.8 0;
    11.5 -5.4 0;
    12.4 -3.3 0;
    13.3 -1.3 0;
    14.3 1.2 0;
    15.4 3.3 0];
speed = [1.5;1.5;1.5;1.5;1.5;1.5;1.5];
trajectory(pedestrian_001, waypoints, speed);

vehicle(scenario, ...
    'ClassID', 2, ...
    'Length', 8.2, ...
    'Width', 2.5, ...
    'Height', 3.5, ...
    'Position', [26.8 -0.5 0], ...
    'Yaw', 110, ...
    'Mesh', driving.scenario.truckMesh, ...
    'Name', 'truck_001');

actor(scenario, ...
    'ClassID', 3, ...
    'Length', 1.7, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [-21.6 -6.1 0], ...
    'Mesh', driving.scenario.bicycleMesh, ...
    'Name', 'pedestrian_002');

actor(scenario, ...
    'ClassID', 4, ...
    'Length', 0.24, ...
    'Width', 0.45, ...
    'Height', 1.7, ...
    'Position', [5.1 2.4 0], ...
    'RCSPattern', [-8 -8;-8 -8], ...
    'Mesh', driving.scenario.pedestrianMesh, ...
    'Name', 'deer_001');

